// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	structures "rimeks.ru/services/pkg/app/structures"
)

// MockOngoingMaintenance is a mock of OngoingMaintenance interface.
type MockOngoingMaintenance struct {
	ctrl     *gomock.Controller
	recorder *MockOngoingMaintenanceMockRecorder
}

// MockOngoingMaintenanceMockRecorder is the mock recorder for MockOngoingMaintenance.
type MockOngoingMaintenanceMockRecorder struct {
	mock *MockOngoingMaintenance
}

// NewMockOngoingMaintenance creates a new mock instance.
func NewMockOngoingMaintenance(ctrl *gomock.Controller) *MockOngoingMaintenance {
	mock := &MockOngoingMaintenance{ctrl: ctrl}
	mock.recorder = &MockOngoingMaintenanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOngoingMaintenance) EXPECT() *MockOngoingMaintenanceMockRecorder {
	return m.recorder
}

// ClearOrders mocks base method.
func (m *MockOngoingMaintenance) ClearOrders() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearOrders")
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearOrders indicates an expected call of ClearOrders.
func (mr *MockOngoingMaintenanceMockRecorder) ClearOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearOrders", reflect.TypeOf((*MockOngoingMaintenance)(nil).ClearOrders))
}

// CreateOrder mocks base method.
func (m *MockOngoingMaintenance) CreateOrder(order structures.OrderList) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", order)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOngoingMaintenanceMockRecorder) CreateOrder(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOngoingMaintenance)(nil).CreateOrder), order)
}

// DeleteOrder mocks base method.
func (m *MockOngoingMaintenance) DeleteOrder(order structures.OrderList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockOngoingMaintenanceMockRecorder) DeleteOrder(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockOngoingMaintenance)(nil).DeleteOrder), order)
}

// GetAllOrders mocks base method.
func (m *MockOngoingMaintenance) GetAllOrders() ([]structures.OrderList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrders")
	ret0, _ := ret[0].([]structures.OrderList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrders indicates an expected call of GetAllOrders.
func (mr *MockOngoingMaintenanceMockRecorder) GetAllOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrders", reflect.TypeOf((*MockOngoingMaintenance)(nil).GetAllOrders))
}

// GetAllOrdersByServiceMarketID mocks base method.
func (m *MockOngoingMaintenance) GetAllOrdersByServiceMarketID(id int) ([]structures.OrderData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrdersByServiceMarketID", id)
	ret0, _ := ret[0].([]structures.OrderData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrdersByServiceMarketID indicates an expected call of GetAllOrdersByServiceMarketID.
func (mr *MockOngoingMaintenanceMockRecorder) GetAllOrdersByServiceMarketID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrdersByServiceMarketID", reflect.TypeOf((*MockOngoingMaintenance)(nil).GetAllOrdersByServiceMarketID), id)
}

// UpdateOrder mocks base method.
func (m *MockOngoingMaintenance) UpdateOrder(order structures.OrderList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOngoingMaintenanceMockRecorder) UpdateOrder(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOngoingMaintenance)(nil).UpdateOrder), order)
}

// MockLogging is a mock of Logging interface.
type MockLogging struct {
	ctrl     *gomock.Controller
	recorder *MockLoggingMockRecorder
}

// MockLoggingMockRecorder is the mock recorder for MockLogging.
type MockLoggingMockRecorder struct {
	mock *MockLogging
}

// NewMockLogging creates a new mock instance.
func NewMockLogging(ctrl *gomock.Controller) *MockLogging {
	mock := &MockLogging{ctrl: ctrl}
	mock.recorder = &MockLoggingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogging) EXPECT() *MockLoggingMockRecorder {
	return m.recorder
}

// ClearLogs mocks base method.
func (m *MockLogging) ClearLogs() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearLogs")
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearLogs indicates an expected call of ClearLogs.
func (mr *MockLoggingMockRecorder) ClearLogs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearLogs", reflect.TypeOf((*MockLogging)(nil).ClearLogs))
}

// CreateLog mocks base method.
func (m *MockLogging) CreateLog(log structures.LogInput) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLog", log)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLog indicates an expected call of CreateLog.
func (mr *MockLoggingMockRecorder) CreateLog(log interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLog", reflect.TypeOf((*MockLogging)(nil).CreateLog), log)
}

// GetAllLogs mocks base method.
func (m *MockLogging) GetAllLogs() ([]structures.LogOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllLogs")
	ret0, _ := ret[0].([]structures.LogOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllLogs indicates an expected call of GetAllLogs.
func (mr *MockLoggingMockRecorder) GetAllLogs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllLogs", reflect.TypeOf((*MockLogging)(nil).GetAllLogs))
}

// GetAllLogsByServiceMarketID mocks base method.
func (m *MockLogging) GetAllLogsByServiceMarketID(id int) ([]structures.LogOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllLogsByServiceMarketID", id)
	ret0, _ := ret[0].([]structures.LogOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllLogsByServiceMarketID indicates an expected call of GetAllLogsByServiceMarketID.
func (mr *MockLoggingMockRecorder) GetAllLogsByServiceMarketID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllLogsByServiceMarketID", reflect.TypeOf((*MockLogging)(nil).GetAllLogsByServiceMarketID), id)
}

// GetServiceMarketNameByID mocks base method.
func (m *MockLogging) GetServiceMarketNameByID(id int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceMarketNameByID", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceMarketNameByID indicates an expected call of GetServiceMarketNameByID.
func (mr *MockLoggingMockRecorder) GetServiceMarketNameByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceMarketNameByID", reflect.TypeOf((*MockLogging)(nil).GetServiceMarketNameByID), id)
}
